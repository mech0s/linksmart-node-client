/**
 * LinkSmart Thing Directory
 * API documetnation of the [LinkSmart Thing Directory](https://github.com/linksmart/thing-directory)
 *
 * The version of the OpenAPI document: 1.0.0-beta.22
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EventsGet200ResponseInner from '../model/EventsGet200ResponseInner';
import ProblemDetails from '../model/ProblemDetails';

/**
* Events service.
* @module api/EventsApi
* @version 1.0.0-beta.22
*/
export default class EventsApi {

    /**
    * Constructs a new EventsApi. 
    * @alias module:api/EventsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the eventsGet operation.
     * @callback module:api/EventsApi~eventsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EventsGet200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Subscribe to all events
     * This API uses the [Server-Sent Events (SSE)](https://www.w3.org/TR/eventsource/) protocol.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.diff Include changed TD attributes inside events payload
     * @param {module:api/EventsApi~eventsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EventsGet200ResponseInner>}
     */
    eventsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'diff': opts['diff']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/event-stream', 'application/json', 'application/ld+json'];
      let returnType = [EventsGet200ResponseInner];
      return this.apiClient.callApi(
        '/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventsTypeGet operation.
     * @callback module:api/EventsApi~eventsTypeGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EventsGet200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Subscribe to specific events
     * This API uses the [Server-Sent Events (SSE)](https://www.w3.org/TR/eventsource/) protocol.
     * @param {module:model/String} type Event type
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.diff Include changed TD attributes inside events payload
     * @param {module:api/EventsApi~eventsTypeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EventsGet200ResponseInner>}
     */
    eventsTypeGet(type, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling eventsTypeGet");
      }

      let pathParams = {
        'type': type
      };
      let queryParams = {
        'diff': opts['diff']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/event-stream', 'application/json', 'application/ld+json'];
      let returnType = [EventsGet200ResponseInner];
      return this.apiClient.callApi(
        '/events/{type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
