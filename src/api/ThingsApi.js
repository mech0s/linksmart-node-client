/**
 * LinkSmart Thing Directory
 * API documetnation of the [LinkSmart Thing Directory](https://github.com/linksmart/thing-directory)
 *
 * The version of the OpenAPI document: 1.0.0-beta.22
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ProblemDetails from '../model/ProblemDetails';
import TdGet400Response from '../model/TdGet400Response';
import ThingDescriptionPage from '../model/ThingDescriptionPage';

/**
* Things service.
* @module api/ThingsApi
* @version 1.0.0-beta.22
*/
export default class ThingsApi {

    /**
    * Constructs a new ThingsApi. 
    * @alias module:api/ThingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the thingsGet operation.
     * @callback module:api/ThingsApi~thingsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ThingDescriptionPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves paginated list of Thing Descriptions
     * The query languages, described [here](https://github.com/linksmart/thing-directory/wiki/Query-Language), can be used to filter results and fetch parts of Thing Descriptions.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number in the pagination
     * @param {Number} opts.perPage Number of entries per page
     * @param {String} opts.jsonpath JSONPath expression for fetching specific items. E.g. `$[?(@.title=='Kitchen Lamp')].properties`
     * @param {String} opts.xpath xPath 3.0 expression for fetching specific items. E.g. `//_*[title='Kitchen Lamp']/properties`
     * @param {module:api/ThingsApi~thingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ThingDescriptionPage}
     */
    thingsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'jsonpath': opts['jsonpath'],
        'xpath': opts['xpath']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/ld+json', 'application/json'];
      let returnType = ThingDescriptionPage;
      return this.apiClient.callApi(
        '/things', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the thingsIdDelete operation.
     * @callback module:api/ThingsApi~thingsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the Thing Description
     * @param {String} id ID of the Thing Description
     * @param {module:api/ThingsApi~thingsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    thingsIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling thingsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/ld+json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/things/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the thingsIdGet operation.
     * @callback module:api/ThingsApi~thingsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a Thing Description
     * @param {String} id ID of the Thing Description
     * @param {module:api/ThingsApi~thingsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    thingsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling thingsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/ld+json', 'application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/things/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the thingsIdPatch operation.
     * @callback module:api/ThingsApi~thingsIdPatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patch a Thing Description
     * The patch document must be based on RFC7396 JSON Merge Patch
     * @param {String} id ID of the Thing Description
     * @param {Object.<String, Object>} body The Thing Description object
     * @param {module:api/ThingsApi~thingsIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    thingsIdPatch(id, body, callback) {
      let postBody = body;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling thingsIdPatch");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling thingsIdPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = ['application/merge-patch+json'];
      let accepts = ['application/json', 'application/ld+json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/things/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the thingsIdPut operation.
     * @callback module:api/ThingsApi~thingsIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Thing Description with the provided ID, or updates an existing one
     * The `id` in the path is the resource id and must match the one in Thing Description.<br> For creating a TD without user-defined `id`, use the `POST` method. 
     * @param {String} id ID of the Thing Description
     * @param {Object.<String, Object>} body The Thing Description object
     * @param {module:api/ThingsApi~thingsIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    thingsIdPut(id, body, callback) {
      let postBody = body;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling thingsIdPut");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling thingsIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = ['application/ld+json'];
      let accepts = ['application/json', 'application/ld+json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/things/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the thingsPost operation.
     * @callback module:api/ThingsApi~thingsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new Thing Description with system-generated ID
     * This is to create a TD and receive a unique system-generated `id` in response.<br> The server rejects the request if there is an `id` in the body.<br> For creating a TD with user-defined `id`, use the `PUT` method. 
     * @param {Object.<String, Object>} body Thing Description to be created
     * @param {module:api/ThingsApi~thingsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    thingsPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling thingsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = ['application/ld+json'];
      let accepts = ['application/json', 'application/ld+json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/things', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
