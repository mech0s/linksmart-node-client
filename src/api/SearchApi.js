/**
 * LinkSmart Thing Directory
 * API documetnation of the [LinkSmart Thing Directory](https://github.com/linksmart/thing-directory)
 *
 * The version of the OpenAPI document: 1.0.0-beta.22
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ProblemDetails from '../model/ProblemDetails';
import SearchJsonpathGet200ResponseInner from '../model/SearchJsonpathGet200ResponseInner';

/**
* Search service.
* @module api/SearchApi
* @version 1.0.0-beta.22
*/
export default class SearchApi {

    /**
    * Constructs a new SearchApi. 
    * @alias module:api/SearchApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the searchJsonpathGet operation.
     * @callback module:api/SearchApi~searchJsonpathGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SearchJsonpathGet200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query TDs with JSONPath expression
     * The query languages, described [here](https://github.com/linksmart/thing-directory/wiki/Query-Language), can be used to filter results and select parts of Thing Descriptions.
     * @param {String} query JSONPath expression for fetching specific items. E.g. `$[?(@.title=='Kitchen Lamp')].properties`
     * @param {module:api/SearchApi~searchJsonpathGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SearchJsonpathGet200ResponseInner>}
     */
    searchJsonpathGet(query, callback) {
      let postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling searchJsonpathGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': query
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/ld+json'];
      let returnType = [SearchJsonpathGet200ResponseInner];
      return this.apiClient.callApi(
        '/search/jsonpath', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchXpathGet operation.
     * @callback module:api/SearchApi~searchXpathGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SearchJsonpathGet200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query TDs with XPath expression
     * The query languages, described [here](https://github.com/linksmart/thing-directory/wiki/Query-Language), can be used to filter results and select parts of Thing Descriptions.
     * @param {String} query xPath 3.0 expression for fetching specific items. E.g. `//_*[title='Kitchen Lamp']/properties`
     * @param {module:api/SearchApi~searchXpathGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SearchJsonpathGet200ResponseInner>}
     */
    searchXpathGet(query, callback) {
      let postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling searchXpathGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': query
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/ld+json'];
      let returnType = [SearchJsonpathGet200ResponseInner];
      return this.apiClient.callApi(
        '/search/xpath', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
